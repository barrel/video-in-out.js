(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = function () {
  var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var listeners = {};

  var on = function on(e) {
    var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!cb) return;
    listeners[e] = listeners[e] || { queue: [] };
    listeners[e].queue.push(cb);
  };

  var emit = function emit(e) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var items = listeners[e] ? listeners[e].queue : false;
    items && items.forEach(function (i) {
      return i(data);
    });
  };

  return _extends({}, o, {
    emit: emit,
    on: on
  });
};

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var requestFrame = window.requestAnimationFrame;
var cancelFrame = window.cancelAnimationFrame;
var scrollChanged = void 0,
    y = void 0,
    prevY = -1,
    idle = true,
    queue = [],
    timeout = void 0,
    tickId = void 0,
    init = false;

if (!requestFrame) {
  ['ms', 'moz', 'webkit', 'o'].every(function (prefix) {
    requestFrame = window[prefix + 'RequestAnimationFrame'];
    cancelFrame = window[prefix + 'CancelAnimationFrame'] || window[prefix + 'CancelRequestAnimationFrame'];
    return !requestFrame;
  });
}

var isSupported = !!requestFrame;

var enable = function enable() {
  window.addEventListener('scroll', debounce);
  document.body.addEventListener('touchmove', debounce);
};

var disable = function disable() {
  window.removeEventListener('scroll', debounce);
  document.body.removeEventListener('touchmove', debounce);
};

var debounce = function debounce() {
  if (!tickId) {
    disable();
    tick();
  }
};

var tick = function tick() {
  tickId = requestFrame(handleScroll);
};

var handleScroll = function handleScroll() {
  y = window.pageYOffset;
  queue.forEach(function (fn) {
    return fn(y, prevY);
  });

  scrollChanged = false;
  if (prevY != y) {
    scrollChanged = true;
    prevY = y;
  }

  if (scrollChanged) {
    clearTimeout(timeout);
    timeout = null;
  } else if (!timeout) {
    timeout = setTimeout(detectIdle, 200);
  }

  tick();
};

var detectIdle = function detectIdle() {
  cancelFrame(tickId);
  tickId = null;
  enable();
};

exports.default = function (cb) {
  if (isSupported) {
    queue.push(cb);
    if (!init) {
      init = true;
      debounce();
      enable();
    }
  } else {
    console.warn('Request Animation Frame not supported');
  }
};

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _rafScroll = require('raf-scroll.js');

var _rafScroll2 = _interopRequireDefault(_rafScroll);

var _loop = require('loop.js');

var _loop2 = _interopRequireDefault(_loop);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var inViewport = function inViewport(el) {
  var rect = el.getBoundingClientRect();
  return rect.top < rect.height && rect.top + rect.height > 0;
};

var merge = function merge(defaults) {
  return function (overwrites) {
    Object.keys(overwrites).forEach(function (val) {
      defaults[val] = overwrites[val];
    });
    return defaults;
  };
};

var testState = function testState(el) {
  return el.readyState == 4;
};

var setSrc = function setSrc(el) {
  return el.setAttribute('src', el.getAttribute('data-src'));
};

var events = (0, _loop2.default)();

exports.default = function (el) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var settings = merge({
    readyClass: 'video-ready',
    parentEl: el.parentNode,
    autoload: true,
    fadeIn: function fadeIn(el) {
      el.parentNode.classList.add('is-ready');
    }
  })(opts);

  var revealed = false;
  var ready = false;
  var paused = true;

  var play = function play() {
    paused = false;
    el.play();
    events.emit('play', el);
  };

  var pause = function pause() {
    paused = true;
    el.pause();
    events.emit('pause', el);
  };

  var setReady = function setReady(value) {
    if (!value) return;
    ready = value;

    if (inViewport(el)) play(el);
    if (!revealed) {
      revealed = true;
      events.emit('ready', el);
      settings.fadeIn(el);
    }
  };

  //Add src immediately
  if (settings.autoload) setSrc(el);

  (0, _rafScroll2.default)(function (y, prevY) {
    if (inViewport(el)) {
      if (!el.getAttribute('src')) {
        setSrc(el);
      }
      if (paused) play(el);
    } else {
      if (!paused) pause(el);
    }
  });

  el.addEventListener('canplaythrough', function () {
    setReady(testState(el));
  });

  setReady(testState(el));

  return {
    on: events.on,
    play: play,
    pause: pause,
    getReady: function getReady() {
      return ready;
    }
  };
};

},{"loop.js":1,"raf-scroll.js":2}],4:[function(require,module,exports){
'use strict';

var _main = require('./../src/main.js');

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

document.addEventListener('DOMContentLoaded', function (e) {
  var videoEl = document.querySelector('video');
  var module = (0, _main2.default)(videoEl);
  module.on('ready', function () {
    return console.dir('ready');
  });
  module.on('pause', function () {
    return console.dir('pause');
  });
  module.on('play', function () {
    return console.dir('play');
  });
});

},{"./../src/main.js":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvbG9vcC5qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yYWYtc2Nyb2xsLmpzL3NyYy9tYWluLmpzIiwic3JjL21haW4uanMiLCJ0ZXN0L2Rldi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O2tCQ0FlLFlBQVk7QUFBQSxNQUFYLENBQVcsdUVBQVAsRUFBTzs7QUFDekIsTUFBTSxZQUFZLEVBQWxCOztBQUVBLE1BQU0sS0FBSyxTQUFMLEVBQUssQ0FBQyxDQUFELEVBQWtCO0FBQUEsUUFBZCxFQUFjLHVFQUFULElBQVM7O0FBQzNCLFFBQUksQ0FBQyxFQUFMLEVBQVM7QUFDVCxjQUFVLENBQVYsSUFBZSxVQUFVLENBQVYsS0FBZ0IsRUFBRSxPQUFPLEVBQVQsRUFBL0I7QUFDQSxjQUFVLENBQVYsRUFBYSxLQUFiLENBQW1CLElBQW5CLENBQXdCLEVBQXhCO0FBQ0QsR0FKRDs7QUFNQSxNQUFNLE9BQU8sU0FBUCxJQUFPLENBQUMsQ0FBRCxFQUFvQjtBQUFBLFFBQWhCLElBQWdCLHVFQUFULElBQVM7O0FBQy9CLFFBQUksUUFBUSxVQUFVLENBQVYsSUFBZSxVQUFVLENBQVYsRUFBYSxLQUE1QixHQUFvQyxLQUFoRDtBQUNBLGFBQVMsTUFBTSxPQUFOLENBQWM7QUFBQSxhQUFLLEVBQUUsSUFBRixDQUFMO0FBQUEsS0FBZCxDQUFUO0FBQ0QsR0FIRDs7QUFLQSxzQkFDSyxDQURMO0FBRUUsY0FGRjtBQUdFO0FBSEY7QUFLRCxDOzs7Ozs7OztBQ25CRCxJQUFJLGVBQWUsT0FBTyxxQkFBMUI7QUFDQSxJQUFJLGNBQWUsT0FBTyxvQkFBMUI7QUFDQSxJQUFJLHNCQUFKO0FBQUEsSUFBbUIsVUFBbkI7QUFBQSxJQUFzQixRQUFRLENBQUMsQ0FBL0I7QUFBQSxJQUFrQyxPQUFPLElBQXpDO0FBQUEsSUFBK0MsUUFBUSxFQUF2RDtBQUFBLElB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VUFBSyxDQUFDLEdBQUEsQUFBRyxhQUFULEFBQU0sQUFBZ0IsUUFBUSxBQUM1QjtlQUFBLEFBQU8sQUFDUjtBQUNEO1VBQUEsQUFBSSxRQUFRLEtBQUEsQUFBSyxBQUNsQjtBQUxELFdBS08sQUFDTDtVQUFJLENBQUosQUFBSyxRQUFRLE1BQUEsQUFBTSxBQUNwQjtBQUNGO0FBVEQsQUFXQTs7S0FBQSxBQUFHLGlCQUFILEFBQW9CLGtCQUFrQixZQUFNLEFBQzFDO2FBQVUsVUFBVixBQUFVLEFBQVUsQUFDckI7QUFGRCxBQUlBOztXQUFVLFVBQVYsQUFBVSxBQUFVLEFBRXBCOzs7UUFDTSxPQURDLEFBQ00sQUFDWDtVQUZLLEFBRUEsQUFDTDtXQUhLLEFBR0MsQUFDTjtjQUFVLG9CQUFBO2FBQUEsQUFBTTtBQUpsQixBQUFPLEFBTVI7QUFOUSxBQUNMO0E7Ozs7O0FDaEZKOzs7Ozs7OztBQUVBLFNBQUEsQUFBUyxpQkFBVCxBQUEwQixvQkFBb0IsYUFBSyxBQUNqRDtNQUFNLFVBQVUsU0FBQSxBQUFTLGNBQXpCLEFBQWdCLEFBQXVCLEFBQ3ZDO01BQU0sU0FBUyxvQkFBZixBQUFlLEFBQU0sQUFDckI7U0FBQSxBQUFPLEdBQVAsQUFBVSxTQUFTLFlBQUE7V0FBTSxRQUFBLEFBQVEsSUFBZCxBQUFNLEFBQVk7QUFBckMsQUFDQTtTQUFBLEFBQU8sR0FBUCxBQUFVLFNBQVMsWUFBQTtXQUFNLFFBQUEsQUFBUSxJQUFkLEFBQU0sQUFBWTtBQUFyQyxBQUNBO1NBQUEsQUFBTyxHQUFQLEFBQVUsUUFBUSxZQUFBO1dBQU0sUUFBQSxBQUFRLElBQWQsQUFBTSxBQUFZO0FBQXBDLEFBQ0Q7QUFORCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnQgZGVmYXVsdCAobyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxpc3RlbmVycyA9IHt9XG5cbiAgY29uc3Qgb24gPSAoZSwgY2IgPSBudWxsKSA9PiB7XG4gICAgaWYgKCFjYikgcmV0dXJuXG4gICAgbGlzdGVuZXJzW2VdID0gbGlzdGVuZXJzW2VdIHx8IHsgcXVldWU6IFtdIH1cbiAgICBsaXN0ZW5lcnNbZV0ucXVldWUucHVzaChjYilcbiAgfVxuXG4gIGNvbnN0IGVtaXQgPSAoZSwgZGF0YSA9IG51bGwpID0+IHtcbiAgICBsZXQgaXRlbXMgPSBsaXN0ZW5lcnNbZV0gPyBsaXN0ZW5lcnNbZV0ucXVldWUgOiBmYWxzZVxuICAgIGl0ZW1zICYmIGl0ZW1zLmZvckVhY2goaSA9PiBpKGRhdGEpKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5vLFxuICAgIGVtaXQsXG4gICAgb25cbiAgfVxufVxuIiwibGV0IHJlcXVlc3RGcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbmxldCBjYW5jZWxGcmFtZSAgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWVcbmxldCBzY3JvbGxDaGFuZ2VkLCB5LCBwcmV2WSA9IC0xLCBpZGxlID0gdHJ1ZSwgcXVldWUgPSBbXSwgdGltZW91dCwgdGlja0lkLCBpbml0ID0gZmFsc2VcblxuaWYgKCFyZXF1ZXN0RnJhbWUpIHtcbiAgWydtcycsICdtb3onLCAnd2Via2l0JywgJ28nXS5ldmVyeShwcmVmaXggPT4ge1xuICAgIHJlcXVlc3RGcmFtZSA9IHdpbmRvd1twcmVmaXggKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgY2FuY2VsRnJhbWUgID0gd2luZG93W3ByZWZpeCArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8XG4gICAgICAgICAgICAgICAgICAgd2luZG93W3ByZWZpeCArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICByZXR1cm4gIXJlcXVlc3RGcmFtZTtcbiAgfSlcbn1cblxuY29uc3QgaXNTdXBwb3J0ZWQgPSAhIXJlcXVlc3RGcmFtZVxuXG5jb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBkZWJvdW5jZSlcbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBkZWJvdW5jZSlcbn1cblxuY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGRlYm91bmNlKVxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGRlYm91bmNlKVxufVxuXG5jb25zdCBkZWJvdW5jZSA9ICgpID0+IHtcbiAgaWYgKCF0aWNrSWQpe1xuICAgIGRpc2FibGUoKVxuICAgIHRpY2soKVxuICB9XG59XG5cbmNvbnN0IHRpY2sgPSAoKSA9PiB7XG4gIHRpY2tJZCA9IHJlcXVlc3RGcmFtZShoYW5kbGVTY3JvbGwpXG59XG5cbmNvbnN0IGhhbmRsZVNjcm9sbCA9ICgpID0+IHtcbiAgeSA9IHdpbmRvdy5wYWdlWU9mZnNldFxuICBxdWV1ZS5mb3JFYWNoKCBmbiA9PiBmbih5LCBwcmV2WSkgKVxuXG4gIHNjcm9sbENoYW5nZWQgPSBmYWxzZVxuICBpZiAocHJldlkgIT0geSl7XG4gICAgc2Nyb2xsQ2hhbmdlZCA9IHRydWVcbiAgICBwcmV2WSA9IHlcbiAgfVxuXG4gIGlmIChzY3JvbGxDaGFuZ2VkKXtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICB0aW1lb3V0ID0gbnVsbFxuICB9IGVsc2UgaWYgKCF0aW1lb3V0KXtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChkZXRlY3RJZGxlLCAyMDApXG4gIH1cblxuICB0aWNrKClcbn1cblxuY29uc3QgZGV0ZWN0SWRsZSA9ICgpID0+IHtcbiAgY2FuY2VsRnJhbWUodGlja0lkKVxuICB0aWNrSWQgPSBudWxsXG4gIGVuYWJsZSgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNiID0+IHtcbiAgaWYgKGlzU3VwcG9ydGVkKXtcbiAgICBxdWV1ZS5wdXNoKGNiKVxuICAgIGlmICghaW5pdCl7XG4gICAgICBpbml0ID0gdHJ1ZVxuICAgICAgZGVib3VuY2UoKVxuICAgICAgZW5hYmxlKClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS53YXJuKCdSZXF1ZXN0IEFuaW1hdGlvbiBGcmFtZSBub3Qgc3VwcG9ydGVkJylcbiAgfVxufSIsImltcG9ydCBzY3JvbGwgZnJvbSAncmFmLXNjcm9sbC5qcydcbmltcG9ydCBsb29wIGZyb20gJ2xvb3AuanMnXG5cbmNvbnN0IGluVmlld3BvcnQgPSBlbCA9PiB7XG4gbGV0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuIHJldHVybiAocmVjdC50b3AgPCByZWN0LmhlaWdodCkgJiYgKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgPiAwKVxufVxuXG5jb25zdCBtZXJnZSA9IGRlZmF1bHRzID0+IG92ZXJ3cml0ZXMgPT4ge1xuICBPYmplY3Qua2V5cyhvdmVyd3JpdGVzKS5mb3JFYWNoKCB2YWwgPT4ge1xuICAgIGRlZmF1bHRzW3ZhbF0gPSBvdmVyd3JpdGVzW3ZhbF1cbiAgfSlcbiAgcmV0dXJuIGRlZmF1bHRzXG59XG5cbmNvbnN0IHRlc3RTdGF0ZSA9IGVsID0+IGVsLnJlYWR5U3RhdGUgPT0gNFxuXG5jb25zdCBzZXRTcmMgPSBlbCA9PiBlbC5zZXRBdHRyaWJ1dGUoJ3NyYycsIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKSApXG5cbmNvbnN0IGV2ZW50cyA9IGxvb3AoKVxuXG5leHBvcnQgZGVmYXVsdCAoZWwsIG9wdHM9e30pID0+IHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBtZXJnZSh7XG4gICAgcmVhZHlDbGFzczondmlkZW8tcmVhZHknLFxuICAgIHBhcmVudEVsOmVsLnBhcmVudE5vZGUsXG4gICAgYXV0b2xvYWQ6dHJ1ZSxcbiAgICBmYWRlSW46IGVsID0+IHtcbiAgICAgIGVsLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnaXMtcmVhZHknKVxuICAgIH1cbiAgfSkob3B0cylcblxuICBsZXQgcmV2ZWFsZWQgPSBmYWxzZVxuICBsZXQgcmVhZHkgICAgPSBmYWxzZVxuICBsZXQgcGF1c2VkICAgPSB0cnVlXG5cbiAgbGV0IHBsYXkgPSAoKSA9PiB7XG4gICAgcGF1c2VkID0gZmFsc2VcbiAgICBlbC5wbGF5KClcbiAgICBldmVudHMuZW1pdCgncGxheScsIGVsKVxuICB9XG5cbiAgbGV0IHBhdXNlID0gKCkgPT4ge1xuICAgIHBhdXNlZCA9IHRydWVcbiAgICBlbC5wYXVzZSgpXG4gICAgZXZlbnRzLmVtaXQoJ3BhdXNlJywgZWwpXG4gIH1cblxuICBsZXQgc2V0UmVhZHkgPSAodmFsdWUpID0+IHtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm5cbiAgICByZWFkeSA9IHZhbHVlXG5cbiAgICBpZiAoIGluVmlld3BvcnQoZWwpICkgcGxheShlbClcbiAgICBpZiAoIXJldmVhbGVkKXtcbiAgICAgIHJldmVhbGVkID0gdHJ1ZVxuICAgICAgZXZlbnRzLmVtaXQoJ3JlYWR5JywgZWwpXG4gICAgICBzZXR0aW5ncy5mYWRlSW4oZWwpXG4gICAgfVxuICB9XG5cbiAgLy9BZGQgc3JjIGltbWVkaWF0ZWx5XG4gIGlmIChzZXR0aW5ncy5hdXRvbG9hZCkgc2V0U3JjKGVsKVxuXG4gIHNjcm9sbCggKHksIHByZXZZKSA9PiB7XG4gICAgaWYgKCBpblZpZXdwb3J0KGVsKSApe1xuICAgICAgaWYgKCAhZWwuZ2V0QXR0cmlidXRlKCdzcmMnKSApe1xuICAgICAgICBzZXRTcmMoZWwpXG4gICAgICB9XG4gICAgICBpZiAocGF1c2VkKSBwbGF5KGVsKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXBhdXNlZCkgcGF1c2UoZWwpXG4gICAgfVxuICB9KVxuXG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXl0aHJvdWdoJywgKCkgPT4ge1xuICAgIHNldFJlYWR5KCB0ZXN0U3RhdGUoZWwpIClcbiAgfSlcblxuICBzZXRSZWFkeSggdGVzdFN0YXRlKGVsKSApXG5cbiAgcmV0dXJuIHtcbiAgICBvbjogZXZlbnRzLm9uLFxuICAgIHBsYXk6cGxheSxcbiAgICBwYXVzZTpwYXVzZSxcbiAgICBnZXRSZWFkeTogKCkgPT4gcmVhZHlcbiAgfVxufVxuIiwiaW1wb3J0IHZpZGVvIGZyb20gJy4vLi4vc3JjL21haW4uanMnXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBlID0+IHtcbiAgY29uc3QgdmlkZW9FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvJylcbiAgY29uc3QgbW9kdWxlID0gdmlkZW8odmlkZW9FbClcbiAgbW9kdWxlLm9uKCdyZWFkeScsICgpID0+IGNvbnNvbGUuZGlyKCdyZWFkeScpKVxuICBtb2R1bGUub24oJ3BhdXNlJywgKCkgPT4gY29uc29sZS5kaXIoJ3BhdXNlJykpXG4gIG1vZHVsZS5vbigncGxheScsICgpID0+IGNvbnNvbGUuZGlyKCdwbGF5JykpXG59KVxuIl19
